/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, $b, TMP_1, $c, TMP_2, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $hash2 = $opal.hash2, $range = $opal.range;

  $opal.add_stubs(['$/', '$[]', '$map', '$each_with_index', '$describe', '$it', '$new', '$mm', '$stroke_color', '$each', '$*', '$line_width=', '$pt', '$line', '$stroke', '$draw_text', '$-', '$+', '$fill_and_stroke_circle', '$render_file', '$puts']);
  ;
  ;
  $opal.cdecl($scope, 'GRID_MM', (115)['$/'](10));
  $opal.cdecl($scope, 'GRID_Y_MM', 4);
  $opal.cdecl($scope, 'SHEET_SIZE_MM', 290);
  $opal.cdecl($scope, 'NOTE_NAMES', ["", "G", "G#", "A", "A#", "H", "c", "c#", "d", "d#", "e", "f", "f#", "g", "g#", "a", "a#", "h", "c'", "c'#", "d'", "d'#", "e'", "f'", "f'#", "g'", "g'#", "a'", "a'#", "h'", "c''", "c''#", "d''", "d'#", "e''", "f''", "f''#", "g''", "g''#", "a''", "a''#", "h''"]);
  $opal.cdecl($scope, 'NOTE_VALUES', $scope.Hash['$[]'](($a = ($b = $scope.NOTE_NAMES.$each_with_index()).$map, $a._p = (TMP_1 = function(value, index){var self = TMP_1._s || this;
if (value == null) value = nil;if (index == null) index = nil;
  return [value, index]}, TMP_1._s = self, TMP_1), $a).call($b)));
  $opal.cdecl($scope, 'NOTES', ["c", "d", "e", "f", "g", "g", "a", "a", "a", "a", "g"]);
  return ($a = ($c = self).$describe, $a._p = (TMP_2 = function(){var self = TMP_2._s || this, $a, $b, TMP_3;

  return ($a = ($b = self).$it, $a._p = (TMP_3 = function(){var self = TMP_3._s || this, $a, $b, TMP_4, $c, TMP_5, pdf = nil, y = nil, oldpos = nil, cmd = nil;

    pdf = ($scope.Prawn)._scope.Document.$new($hash2(["page_size", "page_layout", "margin"], {"page_size": [841.89, 1190.55], "page_layout": "landscape", "margin": [(10).$mm(), 0, 0, 0]}));
      pdf.$stroke_color(50, 100, 0, 0);
      ($a = ($b = ($range(1, 40, false))).$each, $a._p = (TMP_4 = function(i){var self = TMP_4._s || this, x = nil;
if (i == null) i = nil;
      x = i['$*']($scope.GRID_MM.$mm());
        pdf['$line_width=']((0.1).$pt());
        pdf.$line([x, (290).$mm()], [x, (10).$mm()]);
        pdf.$stroke();
        return pdf.$draw_text($scope.NOTE_NAMES['$[]'](i), $hash2(["at"], {"at": [x['$-']((2).$mm()), (6).$mm()]}));}, TMP_4._s = self, TMP_4), $a).call($b);
      y = $scope.SHEET_SIZE_MM['$/']($scope.GRID_Y_MM);
      oldpos = nil;
      pdf.$stroke_color(255, 255, 255, 0);
      ($a = ($c = $scope.NOTES).$each_with_index, $a._p = (TMP_5 = function(v, i){var self = TMP_5._s || this, x = nil, newpos = nil;
if (v == null) v = nil;if (i == null) i = nil;
      x = $scope.NOTE_VALUES['$[]'](v)['$*']($scope.GRID_MM.$mm());
        y = y['$-'](1);
        newpos = [x, (0)['$*']($scope.GRID_Y_MM.$mm())['$+'](y['$*']($scope.GRID_Y_MM.$mm()))];
        if (oldpos !== false && oldpos !== nil) {
          pdf.$line(oldpos, newpos)};
        pdf.$stroke();
        oldpos = newpos;
        return pdf.$fill_and_stroke_circle(newpos, ((0.9)['$*']($scope.GRID_Y_MM)['$/'](2)).$mm());}, TMP_5._s = self, TMP_5), $a).call($c);
      pdf.$render_file("testoutput/pagesize.pdf");
      cmd = "pdfposter -pa3 testoutput/pagesize.pdf testoutput/pagesize_poster.pdf";
      return self.$puts(cmd);}, TMP_3._s = self, TMP_3), $a).call($b, "creates the right page size")}, TMP_2._s = self, TMP_2), $a).call($c, "Zufnoter Page layout");
})(Opal);
