# Rakefile
require 'opal'
require 'opal-jquery'
require 'erb'
require 'zip'
require 'net/http'
require 'pry'
require './neatjson.rb'

HTMLTEMPLATE = "../index_opal.html.erb"
PACKAGE_JSON = "../package.json"
ZUPFNOTER_JS = "build.js"
OUTFOLDER    = "../deploy_files"
INDEXFILE    = "index.html"
LOCALEPATH   = "../public/locale/"

VENDORFOLDER ="../vendor"
ACE_REPO     = "../../../../200_zupfnoter_external_components/ace"

desc "update public/locale"
task :updateLocales do
  puts "updating locales"
  locales = Dir["#{LOCALEPATH}??-??.json"].map { |f| f.split(LOCALEPATH).last }
  locales.each do |locale|
    w2uilocalefile = File.open("#{VENDORFOLDER}/w2ui/dist/#{locale}")
    znlocalefile   = File.open("localization/zupfnoter_#{locale}")

    w2uilocales = JSON.parse(w2uilocalefile.read)
    znlocales   = JSON.parse(znlocalefile.read)


    w2uilocales['phrases'].merge!(znlocales['phrases'])
    File.open("#{LOCALEPATH}/#{locale}", "w") { |f| f.puts JSON.neat_generate(w2uilocales, {wrap: 180, after_colon: 1}) }
  end
end

desc "Update abc2svg from Jean-Francois' website"
task :updateAbc2svg do
  abc2svg_file = "abc2svg-1.js"
  sources      = [abc2svg_file, "json-1.js", "midi-1.js"]
  abc2svg_js   = Net::HTTP.get(URI("http://moinejf.free.fr/js/#{abc2svg_file}"))
  File.open("#{VENDORFOLDER}/#{abc2svg_file}", "w") do |f|
    sources.each do |s|
      f.puts Net::HTTP.get(URI("http://moinejf.free.fr/js/#{s}"))
    end
  end
end

desc "Build our app to #{ZUPFNOTER_JS}"
task :build => [:buildConfigDoc, :updateLocales] do
  #env = Sprockets::Environment.new
  Opal.append_path "."
  Opal.use_gem "vector2d"

  #Opal.paths.each { |p| env.append_path(p) }

  File.open(ZUPFNOTER_JS, "w+") do |out|
    #   out << env["application"].to_s
    #   out << Opal::Processor.load_asset_code(env, 'application')
    out.puts(Opal::Builder::build("application").to_s)
  end

  Dir.glob "../public/*.scss" do |f|
    cmd = "sass #{f} > #{File.dirname(f)}/#{File.basename(f, ".scss")}.css"
    puts sh cmd
  end
end


desc "Rebuuild Ace configuration to #{VENDORFOLDER}/ace"
task :build_ace do
  cd ACE_REPO do
    sh "node Makefile.dryice.js -nc -m full"
    sh "node Makefile.dryice.js full"
  end
  cp_r("#{ACE_REPO}/build/src-min-noconflict/.", "#{VENDORFOLDER}/ace")
end

desc "Build the documentation"
task :doc do
  sh "yard doc . --verbose --backtrace --protected --private"
  sh "yard graph -f doc/diagram.dot -d --verbose --backtrace --full --protected --private"
end

desc "start the development server"
task :server do
  cd "../" do
    sh "bundle exec rackup"
  end
end


desc "Build a distribution for the server"
task :deploy => [:build] do


  # prepare all requested folders
  # todo:this is not dry - see buildDesktop
  ["public/icons", "public/demos", "public/locale",
   "vendor/ace", "vendor/ace/snippets", "vendor/w2ui", "vendor/w2ui/dist",
   "vendor/font-awesome/css", "vendor/font-awesome/fonts",
  ].each do |d|
    mkdir_p("#{OUTFOLDER}/webserver/#{d}")
  end

  Dir["../vendor/*.*"].each { |f|
    cp f, "#{OUTFOLDER}/webserver/vendor/#{f}" unless File.directory?(f)
  }

  sh "./node_modules/uglify-js/bin/uglifyjs -c -m -o #{OUTFOLDER}/webserver/public/#{ZUPFNOTER_JS} #{ZUPFNOTER_JS}"
  #cp ZUPFNOTER_JS, "#{OUTFOLDER}/webserver/public/#{ZUPFNOTER_JS}"


  Dir['../vendor/font-awesome/css/*.*', '../vendor/font-awesome/fonts/*.*'].each { |f| cp f, "#{OUTFOLDER}/webserver/vendor/#{f.split('vendor/').last}" }

  ['w2ui.min.css', 'w2ui.min.js'].each { |f| cp "../vendor/w2ui/dist/#{f}", "#{OUTFOLDER}/webserver/vendor/w2ui/dist/#{f}" }


  cp "../public/index.css", "#{OUTFOLDER}/webserver/public/index.css"
  cp("../public/icons/favicon.png", "#{OUTFOLDER}/webserver/public/icons/favicon.png")
  Dir["../public/demos/*.abc"].each do |f|
    cp f, "#{OUTFOLDER}/webserver/public/demos/#{File.basename(f)}"
  end

  Dir["../public/locale/*.json"].each do |f|
    cp f, "#{OUTFOLDER}/webserver/public/locale/#{File.basename(f)}"
  end

  Dir["../public/*.pdf"].each do |f|
    cp f, "#{OUTFOLDER}/webserver/public/#{File.basename(f)}"
  end

  cp "../vendor/ace/ace.js", "#{OUTFOLDER}/webserver/vendor/ace/ace.js"
  cp "../vendor/ace/mode-abc.js", "#{OUTFOLDER}/webserver/vendor/ace/mode-abc.js"
  cp "../vendor/ace/theme-abc.js", "#{OUTFOLDER}/webserver/vendor/ace/theme-abc.js"
  cp "../vendor/ace/snippets/text.js", "#{OUTFOLDER}/webserver/vendor/ace/snippets/text.js"
  cp "../vendor/ace/ext-language_tools.js", "#{OUTFOLDER}/webserver/vendor/ace/ext-language_tools.js"
  cp("../vendor/ace/snippets/abc.js", "#{OUTFOLDER}/webserver/vendor/ace/snippets/abc.js")
  cp("../vendor/abc2svg-1.js", "#{OUTFOLDER}/vendor/abc2svg-1.js")
  Dir['../vendor/ace/ext-*.*'].each { |f| cp f, "#{OUTFOLDER}/webserver/vendor/#{f.split('vendor/').last}" }

  def javascript_include_tag(filename)
    "<script src = \"public/#{ZUPFNOTER_JS}\" type=\"application/javascript\"></script>"
  end

  def javascript_include_analytics()
    if File.exist?("_analytics.inc.html")
      result = File.open("_analytics.inc.html").read
    else
      result = "<!-- no analytics included -->"
    end
    result
  end

  File.open("#{OUTFOLDER}/webserver/#{INDEXFILE}", "w") do |f|
    a = File.open(HTMLTEMPLATE).read
    f.puts ERB.new(a).result
  end
end


desc "build the desktop application"
task :buildDesktop => [:build] do
  desktop_folder = "#{OUTFOLDER}/desktop"
  nodewebkit_app = "#{OUTFOLDER}/node-webkit.app"
  zupfnoter_app  = "#{desktop_folder}/zupfnoter.app"
  desktop_stage  = "#{desktop_folder}/zupfnoter.nw.stage"

  rm_rf(desktop_folder)
  mkdir_p("#{desktop_stage}/public")
  mkdir_p("#{desktop_stage}/public/locale")
  mkdir_p("#{desktop_stage}/vendor")
  mkdir_p("#{desktop_stage}/vendor/ace")
  mkdir_p("#{desktop_stage}/vendor/w2ui/dist")


  # todo:this is not dry - see buildDesktop
  ["vendor/ace", "vendor/ace/snippets", "public/icons", "vendor/w2ui", "vendor/w2ui/dist",
   "vendor/font-awesome/css", "vendor/font-awesome/fonts"
  ].each do |d|
    puts "making #{d}"
    mkdir_p("#{desktop_stage}/#{d}")
  end

  nw_filename                     = "#{desktop_folder}/zupfnoter.nw"
  index_filename                  = "#{desktop_stage}/index.html"
  zupfnoter_compressedjs_filename = "#{desktop_stage}/public/#{ZUPFNOTER_JS}"

  def javascript_include_tag(filename)
    "<script src = \"public/#{ZUPFNOTER_JS}\" type=\"application/javascript\"></script>"
  end

  def javascript_include_analytics()
    result = "<!-- no analytics included -->"
    result
  end

  File.open(index_filename, "w") do |f|
    a = File.open(HTMLTEMPLATE).read
    f.puts ERB.new(a).result
  end

  sh "./node_modules/uglify-js/bin/uglifyjs -c -m -o #{zupfnoter_compressedjs_filename} #{ZUPFNOTER_JS}"
  #copy(ZUPFNOTER_JS, zupfnoter_compressedjs_filename)

  Dir["../vendor/*.*"].each { |f|
    copy(f, "#{desktop_stage}/vendor/#{f}")
  }

  Dir['../vendor/font-awesome/css/*.*', '../vendor/font-awesome/fonts/*.*'].each { |f| cp f, "#{desktop_stage}/vendor/#{f.split('vendor/').last}" }

  ['w2ui.min.css', 'w2ui.min.js'].each { |f| cp "../vendor/w2ui/dist/#{f}", "#{desktop_stage}/vendor/w2ui/dist/#{f}" }

  Dir["../public/locale/*.*"].each { |f|
    copy(f, "#{desktop_stage}/public/locale/")
  }

  ["vendor/ace", "vendor/ace/snippets", "public/icons"].each do |d|
    mkdir_p("#{desktop_stage}/#{d}")
  end

  #todo improve handling of files
  cp("../public/index.css", "#{desktop_stage}/public/index.css")
  cp("../vendor/ace/ace.js", "#{desktop_stage}/vendor/ace/ace.js")
  cp("../vendor/ace/mode-abc.js", "#{desktop_stage}/vendor/ace/mode-abc.js")
  cp("../vendor/ace/ext-language_tools.js", "#{desktop_stage}/vendor/ace/ext-language_tools.js")
  cp "../vendor/ace/theme-abc.js", "#{desktop_stage}/vendor/ace/theme-abc.js"
  cp "../vendor/ace/snippets/text.js", "#{desktop_stage}/vendor/ace/snippets/text.js"
  cp("../vendor/ace/snippets/abc.js", "#{desktop_stage}/vendor/ace/snippets/abc.js")
  cp("../vendor/abc2svg-1.js", "#{desktop_stage}/vendor/abc2svg-1.js")
  cp("../public/icons/favicon.gif", "#{desktop_stage}/public/icons/favicon.gif")

  cp(PACKAGE_JSON, "#{desktop_stage}/package.json")

  cd desktop_stage do
    sh "zip -r ../zupfnoter.nw *"
  end

  cp_r(nodewebkit_app, zupfnoter_app)
  cp("#{desktop_folder}/zupfnoter.nw", "#{zupfnoter_app}/Contents/Resources/App.nw")

  cd "#{OUTFOLDER}/node-webkit-v0.11.1-win-ia32" do
    sh "cat nw.exe ../desktop/zupfnoter.nw > zupfnoter.exe"
  end

  cd "#{OUTFOLDER}/node-webkit-v0.11.1-win-x64" do
    sh "cat nw.exe ../desktop/zupfnoter.nw > zupfnoter.exe"
  end
  #nw_file.add "../public/icons/favicon.gif", "#{OUTFOLDER}/webserver/public/icons/favicon.gif"
end


desc "config doc and help"
task :buildConfigDoc do
  sh 'ruby conf_doc_source.rb'
  sh 'pandoc xxx.md -o xxx.html --standalone'
end
